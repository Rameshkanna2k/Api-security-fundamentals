--------------------------------------OWASP TOP 10 BACKGROUND--------------------------------------------------
OWASP - Open web application security projects

---------------------------------------Broken object level Authorization-----------------------------------------
Most common damaging api vulnerability , Attacker authenicates as user A and retrive informations of user B.
*manipulating ID's

----------------------------------------Broken Authentication-------------------------------------------
weak or poor authentication creates vulnerability :
missing security controls
poorly implemented controls

weak authentication are things like weak password requirements; 
vulnerability to credential stuffing; 
brute forcing of IDs and passwords - which are quite readily available on the dark web;
lack of CAPTCHAs or rate limiting; lack of lockouts on accounts;
putting authentication info into URLs - which can be sniffed and reused by malicious parties;
changing passwords without authentication or verification; not validating tokens; not storing passwords properly. 


------------------------------Broken object property level authorization-------------------------------------
Exploit of endpoint by reading or modifying values of objects.

User is able to set "account-type:premium" , user select a endpoint returns excessive data , also contains 
sensitive data.

--------------------------------Unrestricted Resource consumption---------------------------------
1.Mass data retrivel
2.risk of operation interruption

Missing inadquate rate controls
exection timeouts
max number of files , upload
Max allocable memory

----------------------------------Broken Functional level authorization----------------------------------
Abuse of API functionality to imporperly modify (create,delete,update) objects.

Often involves replacing passive methods get into PUT,DELETE

Replacing GET with PUT
Modify parameter with role:admin
Deleting an invoice
setting account balance $0

------------------------------------Serverside Resource Forgery----------------------------------
 Exploiting URL inputs to make a request to a malicious , 3rd party server.

User submits:
http://localhost/api/user-data (malware downloaded from malicious site.)

validate and sanitize ALL user-supplied information, including URL parameters.
test url validation effectiveness.

----------------------------------------Security Misconfiguration-------------------------------------------
lack of security hardening
improperly configured permissions
missing security patches
missing TLS
CORS policy missing/improperly set.

Misconfigurations can expose sensitive user data.

---------------------------------------Lack of protection from automated threats--------------------

rate limiting,captchas not always effective against fraudulent traffic,
Rapid IP Rotation makes detection difficult.

-----------------------------------------Improper Inventory Management------------------------------------
Unauthorized API access via old, unused API versions or through trusted 3rd parties

old versions of API's
unpatched endpoints
endpoints with weaker security
outdated documentation
API access via 3rd party

-------------------------------------------Unsafe Consumption of APIs-----------------------------------
Exposures can occur via use of 3rd party APIs,which are generally trusted.

validate data returned by 3rd party APIs
Evaluate security controls of 3rd party API.
Encrypt all api communication
maintain approved list of known locations integrated API's may be redirected.

